proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=prerender_cache:50m inactive=365d max_size=10g use_temp_path=off;

server {

	listen 80;

	server_name prerender.test;

	set $cleaned_args $args;

	if ($cleaned_args ~ (.*)(?:&|^)utm_source=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)utm_term=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)utm_campaign=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)utm_medium=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)utm_content=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)fbclid=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)keyword=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ (.*)(?:&|^)gclid=[^&]*(.*)) {
		set $cleaned_args $1$2;
	}

	if ($cleaned_args ~ ^&(.*)) {
		set $cleaned_args $1;
	}

	set $cleaned_args $is_args$cleaned_args;

	if ($cleaned_args ~ ^\?$) {
		set $cleaned_args "";
	}

	set $cleaned_uri $request_uri;

	if ($cleaned_uri ~ \/([^?]+).*) {
		set $cleaned_uri $1;
	}

	set $cleaned_url $cleaned_uri$cleaned_args;

	location / {
		proxy_cache prerender_cache;
		proxy_cache_key $cleaned_url;

		proxy_ignore_headers Expires;
		proxy_ignore_headers Cache-Control;
		proxy_ignore_headers Set-Cookie;

		proxy_hide_header Expires;
		proxy_hide_header Cache-Control;
		proxy_hide_header Pragma;

		proxy_cache_valid 200 365d;
		proxy_cache_bypass $http_no_cache;
		proxy_cache_revalidate on;
		proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
		proxy_cache_background_update on;

		add_header X-Cache-Status $upstream_cache_status;
		add_header X-Cleaned-Url $cleaned_url;

		resolver 127.0.0.11 valid=30s;
		set $upstream prerender:3000;
		proxy_pass http://$upstream/$cleaned_url;
	}
}
